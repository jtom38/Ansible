---

- name: Ensure Mediaserver defaults
  hosts: mediaserver
  become: true
  # vars are stored in inventory

  tasks:
    - name: Ensure {{ pathDockerRoot }} exists
      file:
        path: "{{ pathDockerRoot }}"
        state: directory

    - name: Ensure {{ pathConfig }} exists
      file:
        path: "{{ pathConfig }}"
        state: directory

    - name: Ensure {{ pathDownloads }} exists
      file:
        path: "{{ pathDownloads }}"
        state: directory

    - name: Ensure {{ pathBackups }} exists
      file:
        path: "{{ pathBackups }}"
        state: directory

    - name: Ensure {{ pathNfs }} exists
      file:
        path: "{{ pathNfs }}"
        state: directory

    - name: Ensure {{ pathNfsBackup }} exists
      file:
        path: "{{ pathNfsBackup }}"
        state: directory

    - name: Ensure {{ pathNfsMedia }} exists
      file:
        path: "{{ pathNfsMedia }}"
        state: directory

    - name: Ensure {{ pathNfsBackup }} is mounted
      mount:
        src: "{{ nfsAddress }}:/{{ nfsDockerConfig }}"
        path: "{{ pathNfsBackup }}"
        fstype: nfs
        boot: yes
        state: mounted

    - name: Ensure {{ pathNfsMedia }} is mounted
      mount:
        src: "{{ nfsAddress }}:/{{ nfsMedia }}"
        path: "{{ pathNfsMedia }}"
        fstype: nfs
        boot: yes
        state: mounted    
        
    - name: make media folder - dep
      file:
        path: "{{ pathMedia }}"
        state: directory

    - name: unmount nfs to /docker/config - dep
      mount:
        src: "{{ nfsAddress }}:/{{ nfsDockerConfig }}"
        path: "{{ pathConfig }}"
        fstype: nfs
        boot: yes
        state: unmounted

    - name: mount nfs to /docker/plex - dep
      mount:
        src: "{{ nfsAddress }}:/{{ nfsMedia }}"
        path: "{{ pathMedia }}"
        fstype: nfs
        boot: yes
        state: mounted

    - name: install docker pip package
      pip:
        name: docker
        state: present
        executable: pip3

    - name: make docker network
      docker_network:
        name: "{{ dockerNetwork }}"
