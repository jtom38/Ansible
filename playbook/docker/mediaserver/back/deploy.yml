
- name: Configure Media Server
  hosts: mediaserver-back
  become: yes
  vars:
    update: false
  
  tasks:

    - docker_network:

    - name: stop hydra
      docker_container:
        name: hydra
        state: absent
      ignore_errors: yes

    

    - name: hydra - Make Hydra
      docker_container:
        name: hydra
        image: 'linuxserver/hydra2'
        state: started
        restart_policy: unless-stopped 
        env:
          PUID=0
          PGID=0
          TZ=Europe/London
        ports:
          - 5076:5076
        volumes:
          - "{{ pathConfig }}/hydra:/config"
          #- "{{ pathDownloads }}:/downloads"
          - "{{ pathNfsTmp }}:/downloads"
        networks:
          - name: "{{ dockerNetwork }}"
            ipv4_address: 172.18.0.10

    - name: sonarr - stop container
      docker_container:
        name: sonarr
        state: absent
      ignore_errors: yes

    - name: sonarr - update image
      shell: docker pull linuxserver/hydra2
      when: update == true

    - name: sonarr - start 
      docker_container:
        name: sonarr
        image: linuxserver/sonarr:latest
        state: started
        restart_policy: unless-stopped 
        env:
          # Use 0 because this runs as root
          PUID=0
          PGID=0
          TZ=Europe/London
          UMASK_SET=022 #optional
        ports:
          - 8989:8989 #http
          #- 9898:9898 #https
        volumes:
          - "{{ pathConfig }}/sonarr:/config"
          - "{{ pathNfsMedia }}:/tv"
          #- "{{ pathDownloads }}:/downloads"
          - "{{ pathNfsTmp}}:/downloads"
        networks:
          - name: "{{ dockerNetwork }}"
            ipv4_address: 172.18.0.11

    - name: stop nzb
      docker_container:
        name: nzbget
        state: absent
      ignore_errors: yes

    - name: nzb - update image
      shell: docker pull linuxserver/nzbget
      when: update == true

    - name: Nzb - deploy
      docker_container:
        name: nzbget
        image: linuxserver/nzbget:latest
        state: started
        restart_policy: unless-stopped 
        env:
          PUID=0
          PGID=0
          TZ=Europe/London
        ports:
          - 6789:6789
        volumes:
          - "{{ pathConfig }}/nzbget:/config"
          #- "{{ pathDownloads }}:/downloads"
          - "{{ pathNfsTmp }}:/downloads"
        networks:
          - name: "{{ dockerNetwork }}"
            ipv4_address: 172.18.0.12

    - name: radarr - stop
      docker_container:
        name: radarr
        state: absent
      ignore_errors: yes

    - name: radarr - update
      shell: docker pull linuxserver/radarr
      when: update == true

    - name: radarr - deploy
      docker_container:
        name: radarr
        image: linuxserver/radarr:latest
        state: started
        restart_policy: unless-stopped
        env:
          PUID=0
          PGID=0
          TZ=Europe/London
          UMASK_SET=022 #optional
        ports:
          - 7878:7878
        volumes:
          - "{{ pathConfig }}/radarr:/config"
          - "{{ pathNfsMedia }}:/movies"
          #- "{{ pathDownloads }}:/downloads"
          - "{{ pathNfsTmp }}:/downloads"
        networks:
          - name : "{{ dockerNetwork }}"
            ipv4_address: 172.18.0.13

    #- name: remove old images
    #  shell: docker image prune --force


